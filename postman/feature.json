{
  "info": {
    "_postman_id": "27381973-9441-4146-9ca3-621718497e2a",
    "name": "feature",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "17671230"
  },
  "item": [
    {
      "name": "Validation",
      "item": [
        {
          "name": "Р”РѕР±Р°РІР»РµРЅРёРµ РєРѕРјРјРµРЅС‚Р° СЃ РїСѓСЃС‚С‹Рј С‚РµРєСЃС‚РѕРј",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        pm.collectionVariables.set(\"uid\", user.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        comment = rnd.getComment();\r",
                  "        comment[\"comment\"] = '';\r",
                  "    } catch(err) {\r",
                  "        console.error(\"РћС€РёР±РєР° РїСЂРё РїРѕРґРіРѕС‚РѕРІРєРµ С‚РµСЃС‚РѕРІС‹С… РґР°РЅРЅС‹С….\", err);\r",
                  "    }\r",
                  "    pm.request.body.update({\r",
                  "        mode: 'raw',\r",
                  "        raw: JSON.stringify(comment),\r",
                  "        options: { raw: { language: 'json' } }\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"РћС‚РІРµС‚ РґРѕР»Р¶РµРЅ СЃРѕРґРµСЂР¶Р°С‚СЊ РєРѕРґ СЃС‚Р°С‚СѓСЃР° 400 Рё РґР°РЅРЅС‹Рµ РІ С„РѕСЂРјР°С‚Рµ json\", function () {\r",
                  "    pm.response.to.be.badRequest;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Р”РѕР±Р°РІР»РµРЅРёРµ РєРѕРјРјРµРЅС‚Р° СЃ С‚РµРєСЃС‚РѕРј РјРµРЅСЊС€Рµ 20 СЃРёРјРІРѕР»РѕРІ",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        pm.collectionVariables.set(\"uid\", user.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        comment = rnd.getComment();\r",
                  "        comment[\"comment\"] = 'textextextextextesx';\r",
                  "    } catch(err) {\r",
                  "        console.error(\"РћС€РёР±РєР° РїСЂРё РїРѕРґРіРѕС‚РѕРІРєРµ С‚РµСЃС‚РѕРІС‹С… РґР°РЅРЅС‹С….\", err);\r",
                  "    }\r",
                  "    pm.request.body.update({\r",
                  "        mode: 'raw',\r",
                  "        raw: JSON.stringify(comment),\r",
                  "        options: { raw: { language: 'json' } }\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"РћС‚РІРµС‚ РґРѕР»Р¶РµРЅ СЃРѕРґРµСЂР¶Р°С‚СЊ РєРѕРґ СЃС‚Р°С‚СѓСЃР° 400 Рё РґР°РЅРЅС‹Рµ РІ С„РѕСЂРјР°С‚Рµ json\", function () {\r",
                  "    pm.response.to.be.badRequest;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Р”РѕР±Р°РІР»РµРЅРёРµ РєРѕРјРјРµРЅС‚Р° РѕС‚ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ, РЅРµ СѓС‡Р°СЃС‚РЅРёРєР° СЃРѕР±С‹С‚РёСЏ",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user1 = await api.addUser(rnd.getUser());\r",
                  "        const user2 = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        const event = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
                  "        pm.collectionVariables.set(\"uid\", user2.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        comment = rnd.getComment();\r",
                  "    } catch(err) {\r",
                  "        console.error(\"РћС€РёР±РєР° РїСЂРё РїРѕРґРіРѕС‚РѕРІРєРµ С‚РµСЃС‚РѕРІС‹С… РґР°РЅРЅС‹С….\", err);\r",
                  "    }\r",
                  "    pm.request.body.update({\r",
                  "        mode: 'raw',\r",
                  "        raw: JSON.stringify(comment),\r",
                  "        options: { raw: { language: 'json' } }\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"РћС‚РІРµС‚ РґРѕР»Р¶РµРЅ СЃРѕРґРµСЂР¶Р°С‚СЊ РєРѕРґ СЃС‚Р°С‚СѓСЃР° 409 Рё РґР°РЅРЅС‹Рµ РІ С„РѕСЂРјР°С‚Рµ json\", function () {\r",
                  "    pm.response.to.have.status(409);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Р”РѕР±Р°РІР»РµРЅРёРµ РєРѕРјРјРµРЅС‚Р° РѕС‚ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ РїРѕ РѕС‚СЃСѓС‚СЃС‚РІСѓСЋС‰РµРјСѓ СЃРѕР±С‹С‚РёСЋ",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"uid\", user.id);\r",
                  "        pm.collectionVariables.set(\"eid\", -1);\r",
                  "        comment = rnd.getComment();\r",
                  "    } catch(err) {\r",
                  "        console.error(\"РћС€РёР±РєР° РїСЂРё РїРѕРґРіРѕС‚РѕРІРєРµ С‚РµСЃС‚РѕРІС‹С… РґР°РЅРЅС‹С….\", err);\r",
                  "    }\r",
                  "    pm.request.body.update({\r",
                  "        mode: 'raw',\r",
                  "        raw: JSON.stringify(comment),\r",
                  "        options: { raw: { language: 'json' } }\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"РћС‚РІРµС‚ РґРѕР»Р¶РµРЅ СЃРѕРґРµСЂР¶Р°С‚СЊ РєРѕРґ СЃС‚Р°С‚СѓСЃР° 404 Рё РґР°РЅРЅС‹Рµ РІ С„РѕСЂРјР°С‚Рµ json\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Р”РѕР±Р°РІР»РµРЅРёРµ РєРѕРјРјРµРЅС‚Р° РѕС‚ РѕС‚СЃСѓС‚СЃС‚РІСѓСЋС‰РµРіРѕ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        pm.collectionVariables.set(\"uid\", -1);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        comment = rnd.getComment();\r",
                  "    } catch(err) {\r",
                  "        console.error(\"РћС€РёР±РєР° РїСЂРё РїРѕРґРіРѕС‚РѕРІРєРµ С‚РµСЃС‚РѕРІС‹С… РґР°РЅРЅС‹С….\", err);\r",
                  "    }\r",
                  "    pm.request.body.update({\r",
                  "        mode: 'raw',\r",
                  "        raw: JSON.stringify(comment),\r",
                  "        options: { raw: { language: 'json' } }\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"РћС‚РІРµС‚ РґРѕР»Р¶РµРЅ СЃРѕРґРµСЂР¶Р°С‚СЊ РєРѕРґ СЃС‚Р°С‚СѓСЃР° 404 Рё РґР°РЅРЅС‹Рµ РІ С„РѕСЂРјР°С‚Рµ json\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "РћР±РЅРѕРІР»РµРЅРёРµ РєРѕРјРјРµРЅС‚Р° РЅР° РїСѓСЃС‚РѕР№ С‚РµРєСЃС‚",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let eventBody = rnd.getEvent(category.id);\r",
                  "        eventBody['requestModeration'] = false\r",
                  "        let event = await api.addEvent(user.id, eventBody);\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const submittedUser = await api.addUser(rnd.getUser());\r",
                  "        const requestToJoin = await api.publishParticipationRequest(event.id, submittedUser.id);\r",
                  "\r",
                  "        pm.collectionVariables.set(\"uid\", submittedUser.id);\r",
                  "        let comment = await api.addComment(submittedUser.id, event.id, rnd.getComment());\r",
                  "        pm.collectionVariables.set(\"cid\", comment.id);\r",
                  "\r",
                  "        comment2 = rnd.getComment();\r",
                  "        comment2[\"comment\"] = '';\r",
                  "\r",
                  "    } catch(err) {\r",
                  "        console.error(\"РћС€РёР±РєР° РїСЂРё РїРѕРґРіРѕС‚РѕРІРєРµ С‚РµСЃС‚РѕРІС‹С… РґР°РЅРЅС‹С….\", err);\r",
                  "    }\r",
                  "    pm.request.body.update({\r",
                  "        mode: 'raw',\r",
                  "        raw: JSON.stringify(comment2),\r",
                  "        options: { raw: { language: 'json' } }\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"РћС‚РІРµС‚ РґРѕР»Р¶РµРЅ СЃРѕРґРµСЂР¶Р°С‚СЊ РєРѕРґ СЃС‚Р°С‚СѓСЃР° 400 Рё РґР°РЅРЅС‹Рµ РІ С„РѕСЂРјР°С‚Рµ json\", function () {\r",
                  "    pm.response.to.be.badRequest;\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "РћР±РЅРѕРІР»РµРЅРёРµ РєРѕРјРјРµРЅС‚Р° РЅРµ СЃРѕР·РґР°С‚РµР»РµРј РєРѕРјРјРµРЅС‚Р°",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let eventBody = rnd.getEvent(category.id);\r",
                  "        eventBody['requestModeration'] = false\r",
                  "        let event = await api.addEvent(user.id, eventBody);\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const submittedUser = await api.addUser(rnd.getUser());\r",
                  "        const requestToJoin = await api.publishParticipationRequest(event.id, submittedUser.id);\r",
                  "\r",
                  "        pm.collectionVariables.set(\"uid\", user.id);\r",
                  "        let comment = await api.addComment(submittedUser.id, event.id, rnd.getComment());\r",
                  "        pm.collectionVariables.set(\"cid\", comment.id);\r",
                  "\r",
                  "        comment2 = rnd.getComment();\r",
                  "\r",
                  "    } catch(err) {\r",
                  "        console.error(\"РћС€РёР±РєР° РїСЂРё РїРѕРґРіРѕС‚РѕРІРєРµ С‚РµСЃС‚РѕРІС‹С… РґР°РЅРЅС‹С….\", err);\r",
                  "    }\r",
                  "    pm.request.body.update({\r",
                  "        mode: 'raw',\r",
                  "        raw: JSON.stringify(comment2),\r",
                  "        options: { raw: { language: 'json' } }\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"РћС‚РІРµС‚ РґРѕР»Р¶РµРЅ СЃРѕРґРµСЂР¶Р°С‚СЊ РєРѕРґ СЃС‚Р°С‚СѓСЃР° 404 Рё РґР°РЅРЅС‹Рµ РІ С„РѕСЂРјР°С‚Рµ json\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "РЈРґР°Р»РµРЅРёРµ РєРѕРјРјРµРЅС‚Р° РЅРµ СЃРѕР·РґР°С‚РµР»РµРј",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let eventBody = rnd.getEvent(category.id);\r",
                  "        eventBody['requestModeration'] = false\r",
                  "        let event = await api.addEvent(user.id, eventBody);\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const submittedUser = await api.addUser(rnd.getUser());\r",
                  "        const requestToJoin = await api.publishParticipationRequest(event.id, submittedUser.id);\r",
                  "\r",
                  "        pm.collectionVariables.set(\"uid\", user.id);\r",
                  "        let comment = await api.addComment(submittedUser.id, event.id, rnd.getComment());\r",
                  "        pm.collectionVariables.set(\"cid\", comment.id);\r",
                  "\r",
                  "    } catch(err) {\r",
                  "        console.error(\"РћС€РёР±РєР° РїСЂРё РїРѕРґРіРѕС‚РѕРІРєРµ С‚РµСЃС‚РѕРІС‹С… РґР°РЅРЅС‹С….\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"РћС‚РІРµС‚ РґРѕР»Р¶РµРЅ СЃРѕРґРµСЂР¶Р°С‚СЊ РєРѕРґ СЃС‚Р°С‚СѓСЃР° 404 Рё РґР°РЅРЅС‹Рµ РІ С„РѕСЂРјР°С‚Рµ json\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Comment",
      "item": [
        {
          "name": "Р”РѕР±Р°РІР»РµРЅРёРµ РЅРѕРІРѕРіРѕ РєРѕРјРјРµРЅС‚Р°",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let eventBody = rnd.getEvent(category.id);\r",
                  "        eventBody['requestModeration'] = false\r",
                  "        let event = await api.addEvent(user.id, eventBody);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const submittedUser = await api.addUser(rnd.getUser());\r",
                  "        const requestToJoin = await api.publishParticipationRequest(event.id, submittedUser.id);\r",
                  "\r",
                  "        pm.collectionVariables.set(\"uid\", submittedUser.id);\r",
                  "        comment =  rnd.getComment();\r",
                  "\r",
                  "    } catch(err) {\r",
                  "        console.error(\"РћС€РёР±РєР° РїСЂРё РїРѕРґРіРѕС‚РѕРІРєРµ С‚РµСЃС‚РѕРІС‹С… РґР°РЅРЅС‹С….\", err);\r",
                  "    }\r",
                  "    pm.request.body.update({\r",
                  "        mode: 'raw',\r",
                  "        raw: JSON.stringify(comment),\r",
                  "        options: { raw: { language: 'json' } }\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"РћС‚РІРµС‚ РґРѕР»Р¶РµРЅ СЃРѕРґРµСЂР¶Р°С‚СЊ РєРѕРґ СЃС‚Р°С‚СѓСЃР° 201 Рё РґР°РЅРЅС‹Рµ РІ С„РѕСЂРјР°С‚Рµ json\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"РљРѕРјРјРµРЅС‚Р°СЂРёР№ РґРѕР»Р¶РµРЅ СЃРѕРґРµСЂР¶Р°С‚СЊ РїРѕР»СЏ: id, comment\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('comment');\r",
                  "pm.expect(target).to.have.property('eventId');\r",
                  "pm.expect(target).to.have.property('user');\r",
                  "pm.expect(target).to.have.property('createdOn');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Р”Р°РЅРЅС‹Рµ РІ РѕС‚РІРµС‚Рµ РґРѕР»Р¶РЅС‹ СЃРѕРѕС‚РІРµС‚СЃС‚РІРѕРІР°С‚СЊ РґР°РЅРЅС‹Рј РІ Р·Р°РїСЂРѕСЃРµ\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(source.comment).equal(target.comment, 'С‚РµРєСЃС‚ РєРѕРјРјРµРЅС‚Р° РґРѕР»Р¶РµРЅ СЃРѕРІРїР°РґР°С‚СЊ СЃ РѕС‚РїСЂР°РІР»РµРЅРЅС‹Рј');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "РћР±РЅРѕРІР»РµРЅРёРµ РєРѕРјРјРµРЅС‚Р°",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let eventBody = rnd.getEvent(category.id);\r",
                  "        eventBody['requestModeration'] = false\r",
                  "        let event = await api.addEvent(user.id, eventBody);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const submittedUser = await api.addUser(rnd.getUser());\r",
                  "        const requestToJoin = await api.publishParticipationRequest(event.id, submittedUser.id);\r",
                  "\r",
                  "        pm.collectionVariables.set(\"uid\", submittedUser.id);\r",
                  "        let comment = await api.addComment(submittedUser.id, event.id, rnd.getComment());\r",
                  "        pm.collectionVariables.set(\"cid\", comment.id);\r",
                  "\r",
                  "        comment2 = rnd.getComment();\r",
                  "\r",
                  "    } catch(err) {\r",
                  "        console.error(\"РћС€РёР±РєР° РїСЂРё РїРѕРґРіРѕС‚РѕРІРєРµ С‚РµСЃС‚РѕРІС‹С… РґР°РЅРЅС‹С….\", err);\r",
                  "    }\r",
                  "    pm.request.body.update({\r",
                  "        mode: 'raw',\r",
                  "        raw: JSON.stringify(comment2),\r",
                  "        options: { raw: { language: 'json' } }\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"РћС‚РІРµС‚ РґРѕР»Р¶РµРЅ СЃРѕРґРµСЂР¶Р°С‚СЊ РєРѕРґ СЃС‚Р°С‚СѓСЃР° 200 Рё РґР°РЅРЅС‹Рµ РІ С„РѕСЂРјР°С‚Рµ json\", function () {\r",
                  "    pm.response.to.be.ok\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"РљРѕРјРјРµРЅС‚Р°СЂРёР№ РґРѕР»Р¶РµРЅ СЃРѕРґРµСЂР¶Р°С‚СЊ РїРѕР»СЏ: id, comment\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('comment');\r",
                  "pm.expect(target).to.have.property('eventId');\r",
                  "pm.expect(target).to.have.property('user');\r",
                  "pm.expect(target).to.have.property('createdOn');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Р”Р°РЅРЅС‹Рµ РІ РѕС‚РІРµС‚Рµ РґРѕР»Р¶РЅС‹ СЃРѕРѕС‚РІРµС‚СЃС‚РІРѕРІР°С‚СЊ РґР°РЅРЅС‹Рј РІ Р·Р°РїСЂРѕСЃРµ\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(source.comment).equal(target.comment, 'С‚РµРєСЃС‚ РєРѕРјРјРµРЅС‚Р° РґРѕР»Р¶РµРЅ СЃРѕРІРїР°РґР°С‚СЊ СЃ РѕС‚РїСЂР°РІР»РµРЅРЅС‹Рј');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "РџРѕР»СѓС‡РµРЅРёРµ РєРѕРјРјРµРЅС‚Р°",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let eventBody = rnd.getEvent(category.id);\r",
                  "        eventBody['requestModeration'] = false\r",
                  "        let event = await api.addEvent(user.id, eventBody);\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const submittedUser = await api.addUser(rnd.getUser());\r",
                  "        const requestToJoin = await api.publishParticipationRequest(event.id, submittedUser.id);\r",
                  "        comment = await api.addComment(submittedUser.id, event.id, rnd.getComment());\r",
                  "        pm.collectionVariables.set(\"cid\", comment.id);\r",
                  "        pm.collectionVariables.set(\"response\", comment)\r",
                  "    } catch(err) {\r",
                  "        console.error(\"РћС€РёР±РєР° РїСЂРё РїРѕРґРіРѕС‚РѕРІРєРµ С‚РµСЃС‚РѕРІС‹С… РґР°РЅРЅС‹С….\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"РћС‚РІРµС‚ РґРѕР»Р¶РµРЅ СЃРѕРґРµСЂР¶Р°С‚СЊ РєРѕРґ СЃС‚Р°С‚СѓСЃР° 200 Рё РґР°РЅРЅС‹Рµ РІ С„РѕСЂРјР°С‚Рµ json\", function () {\r",
                  "    pm.response.to.be.ok\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = pm.collectionVariables.get('response');\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"РљРѕРјРјРµРЅС‚Р°СЂРёР№ РґРѕР»Р¶РµРЅ СЃРѕРґРµСЂР¶Р°С‚СЊ РїРѕР»СЏ: id, comment\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('comment');\r",
                  "pm.expect(target).to.have.property('eventId');\r",
                  "pm.expect(target).to.have.property('user');\r",
                  "pm.expect(target).to.have.property('createdOn');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Р”Р°РЅРЅС‹Рµ РІ РѕС‚РІРµС‚Рµ РґРѕР»Р¶РЅС‹ СЃРѕРѕС‚РІРµС‚СЃС‚РІРѕРІР°С‚СЊ РґР°РЅРЅС‹Рј РІ Р·Р°РїСЂРѕСЃРµ\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(source.comment).equal(target.comment, 'С‚РµРєСЃС‚ РєРѕРјРјРµРЅС‚Р° РґРѕР»Р¶РµРЅ СЃРѕРІРїР°РґР°С‚СЊ СЃ РѕС‚РїСЂР°РІР»РµРЅРЅС‹Рј');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}"
            },
            "url": {
              "raw": "{{baseUrl}}/events/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "РџРѕР»СѓС‡РµРЅРёРµ СЃРїРёСЃРєР° РєРѕРјРјРµРЅС‚Р°СЂРёРµРІ РїРѕ СЃРѕР±С‹С‚РёСЋ",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let eventBody = rnd.getEvent(category.id);\r",
                  "        eventBody['requestModeration'] = false\r",
                  "        let event = await api.addEvent(user.id, eventBody);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const submittedUser = await api.addUser(rnd.getUser());\r",
                  "        const requestToJoin = await api.publishParticipationRequest(event.id, submittedUser.id);\r",
                  "        comment = await api.addComment(submittedUser.id, event.id, rnd.getComment());\r",
                  "        pm.collectionVariables.set(\"response\", comment)\r",
                  "    } catch(err) {\r",
                  "        console.error(\"РћС€РёР±РєР° РїСЂРё РїРѕРґРіРѕС‚РѕРІРєРµ С‚РµСЃС‚РѕРІС‹С… РґР°РЅРЅС‹С….\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"РћС‚РІРµС‚ РґРѕР»Р¶РµРЅ СЃРѕРґРµСЂР¶Р°С‚СЊ РєРѕРґ СЃС‚Р°С‚СѓСЃР° 200 Рё РґР°РЅРЅС‹Рµ РІ С„РѕСЂРјР°С‚Рµ json\", function () {\r",
                  "    pm.response.to.be.ok\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = pm.collectionVariables.get('response');\r",
                  "const target = pm.response.json();\r",
                  "let founded;\r",
                  "target.forEach(function(element){if (element.id == source.id) founded = element});\r",
                  "\r",
                  "pm.test(\"РљРѕРјРјРµРЅС‚Р°СЂРёР№ РґРѕР»Р¶РµРЅ СЃРѕРґРµСЂР¶Р°С‚СЊ РїРѕР»СЏ: id, comment\", function () {\r",
                  "pm.expect(target[0]).to.have.property('id');\r",
                  "pm.expect(target[0]).to.have.property('comment');\r",
                  "pm.expect(target[0]).to.have.property('eventId');\r",
                  "pm.expect(target[0]).to.have.property('user');\r",
                  "pm.expect(target[0]).to.have.property('createdOn');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Р”Р°РЅРЅС‹Рµ РІ РѕС‚РІРµС‚Рµ РґРѕР»Р¶РЅС‹ СЃРѕРѕС‚РІРµС‚СЃС‚РІРѕРІР°С‚СЊ РґР°РЅРЅС‹Рј РІ Р·Р°РїСЂРѕСЃРµ\", function () {\r",
                  "    pm.expect(source.id).equal(founded.id, 'РРґРµРЅС‚РёС„РёРєР°С‚РѕСЂ РєРѕРјРјРµРЅС‚Р° РґРѕР»Р¶РµРЅ СЃРѕРѕС‚РІРµС‚СЃС‚РІРѕРІР°С‚СЊ РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂСѓ РєРѕРјРјРµРЅС‚Р° РґРѕР±Р°РІР»РµРЅРЅРѕuj СЂР°РЅРµРµ');\r",
                  "    pm.expect(source.comment).equal(founded.comment, 'С‚РµРєСЃС‚ РєРѕРјРјРµРЅС‚Р° РґРѕР»Р¶РµРЅ СЃРѕРІРїР°РґР°С‚СЊ СЃ РѕС‚РїСЂР°РІР»РµРЅРЅС‹Рј');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}"
            },
            "url": {
              "raw": "{{baseUrl}}/events/:eventId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":eventId",
                "comments"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "РџРѕР»СѓС‡РµРЅРёРµ СЃРїРёСЃРєР° РєРѕРјРјРµРЅС‚Р°СЂРёРµРІ РїРѕ СЃРѕР±С‹С‚РёСЋ СЃ РІРѕР·РјРѕР¶РЅРѕСЃС‚СЏРјРё С„РёР»СЊС‚СЂР°С†РёРё",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let eventBody = rnd.getEvent(category.id);\r",
                  "        eventBody['requestModeration'] = false\r",
                  "        let event = await api.addEvent(user.id, eventBody);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const submittedUser = await api.addUser(rnd.getUser());\r",
                  "        const requestToJoin = await api.publishParticipationRequest(event.id, submittedUser.id);\r",
                  "        comment = await api.addComment(submittedUser.id, event.id, rnd.getComment());\r",
                  "        pm.collectionVariables.set(\"response\", comment)\r",
                  "        pm.request.removeQueryParams(['userIds']);\r",
                  "        pm.request.addQueryParams([`userIds=` + submittedUser.id]);\r",
                  "    } catch(err) {\r",
                  "        console.error(\"РћС€РёР±РєР° РїСЂРё РїРѕРґРіРѕС‚РѕРІРєРµ С‚РµСЃС‚РѕРІС‹С… РґР°РЅРЅС‹С….\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"РћС‚РІРµС‚ РґРѕР»Р¶РµРЅ СЃРѕРґРµСЂР¶Р°С‚СЊ РєРѕРґ СЃС‚Р°С‚СѓСЃР° 200 Рё РґР°РЅРЅС‹Рµ РІ С„РѕСЂРјР°С‚Рµ json\", function () {\r",
                  "    pm.response.to.be.ok\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = pm.collectionVariables.get('response');\r",
                  "const target = pm.response.json();\r",
                  "let founded;\r",
                  "target.forEach(function(element){if (element.id == source.id) founded = element});\r",
                  "\r",
                  "pm.test(\"РљРѕРјРјРµРЅС‚Р°СЂРёР№ РґРѕР»Р¶РµРЅ СЃРѕРґРµСЂР¶Р°С‚СЊ РїРѕР»СЏ: id, comment\", function () {\r",
                  "pm.expect(target[0]).to.have.property('id');\r",
                  "pm.expect(target[0]).to.have.property('comment');\r",
                  "pm.expect(target[0]).to.have.property('eventId');\r",
                  "pm.expect(target[0]).to.have.property('user');\r",
                  "pm.expect(target[0]).to.have.property('createdOn');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Р”Р°РЅРЅС‹Рµ РІ РѕС‚РІРµС‚Рµ РґРѕР»Р¶РЅС‹ СЃРѕРѕС‚РІРµС‚СЃС‚РІРѕРІР°С‚СЊ РґР°РЅРЅС‹Рј РІ Р·Р°РїСЂРѕСЃРµ\", function () {\r",
                  "    pm.expect(source.id).equal(founded.id, 'РРґРµРЅС‚РёС„РёРєР°С‚РѕСЂ РєРѕРјРјРµРЅС‚Р° РґРѕР»Р¶РµРЅ СЃРѕРѕС‚РІРµС‚СЃС‚РІРѕРІР°С‚СЊ РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂСѓ РєРѕРјРјРµРЅС‚Р° РґРѕР±Р°РІР»РµРЅРЅРѕuj СЂР°РЅРµРµ');\r",
                  "    pm.expect(source.comment).equal(founded.comment, 'С‚РµРєСЃС‚ РєРѕРјРјРµРЅС‚Р° РґРѕР»Р¶РµРЅ СЃРѕРІРїР°РґР°С‚СЊ СЃ РѕС‚РїСЂР°РІР»РµРЅРЅС‹Рј');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}"
            },
            "url": {
              "raw": "{{baseUrl}}/events/:eventId/comments?rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&from=0&size=1000&userIds=1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":eventId",
                "comments"
              ],
              "query": [
                {
                  "key": "rangeStart",
                  "value": "2022-01-06%2013%3A30%3A38"
                },
                {
                  "key": "rangeEnd",
                  "value": "2097-09-06%2013%3A30%3A38"
                },
                {
                  "key": "from",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "1000"
                },
                {
                  "key": "userIds",
                  "value": "1"
                }
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "РЈРґР°Р»РµРЅРёРµ РєРѕРјРјРµРЅС‚Р°",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let eventBody = rnd.getEvent(category.id);\r",
                  "        eventBody['requestModeration'] = false\r",
                  "        let event = await api.addEvent(user.id, eventBody);\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const submittedUser = await api.addUser(rnd.getUser());\r",
                  "        const requestToJoin = await api.publishParticipationRequest(event.id, submittedUser.id);\r",
                  "\r",
                  "        pm.collectionVariables.set(\"uid\", submittedUser.id);\r",
                  "        let comment = await api.addComment(submittedUser.id, event.id, rnd.getComment());\r",
                  "        pm.collectionVariables.set(\"cid\", comment.id);\r",
                  "        pm.collectionVariables.set(\"response\", comment)\r",
                  "    } catch(err) {\r",
                  "        console.error(\"РћС€РёР±РєР° РїСЂРё РїРѕРґРіРѕС‚РѕРІРєРµ С‚РµСЃС‚РѕРІС‹С… РґР°РЅРЅС‹С….\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"РћС‚РІРµС‚ РґРѕР»Р¶РµРЅ СЃРѕРґРµСЂР¶Р°С‚СЊ РєРѕРґ СЃС‚Р°С‚СѓСЃР° 204\", function () {\r",
                  "    pm.response.to.have.status(204);\r",
                  "});\r",
                  "\r",
                  "source = pm.collectionVariables.get('response');\r",
                  "cid = pm.collectionVariables.get('cid');\r",
                  "\r",
                  "pm.test(\"РљРѕРјРјРµРЅС‚ РґРѕР»Р¶РµРЅ Р±С‹С‚СЊ РЅР°Р№РґРµРЅ РґРѕ СѓРґР°Р»РµРЅРёСЏ\", function () {\r",
                  "    pm.expect(source.id).equal(cid, 'РРґРµРЅС‚РёС„РёРєС‚РѕСЂ РєРѕРјРјРµРЅС‚Р° РґРѕР»Р¶РµРЅ СЃРѕРІРїР°РґР°С‚СЊ СЃ СѓРґР°Р»СЏРµРјС‹Рј');\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest({\r",
                  "            url: pm.collectionVariables.get(\"baseUrl\") + \"/events/comments/\" + cid,\r",
                  "            method: 'GET',\r",
                  "        }, (error, response) => {\r",
                  "            pm.test(\"РєРѕРјРјРµРЅС‚ РЅРµ РґРѕР»Р¶РµРЅ Р±С‹С‚СЊ РЅР°Р№РґРµРЅ РїРѕСЃР»Рµ СѓРґР°Р»РµРЅРёСЏ\", function () {\r",
                  "                pm.expect(response.code).to.eql(404);\r",
                  "            });\r",
                  "        });\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"РћС€РёР±РєР° РїСЂРё РґРѕР±Р°РІР»РµРЅРёРё РЅРѕРІРѕРіРѕ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"РћС€РёР±РєР° РїСЂРё РґРѕР±Р°РІР»РµРЅРёРё РЅРѕРІРѕР№ РєР°С‚РµРіРѕСЂРёРё: \", verbose);",
          "    }",
          "",
          "    async addComment(userId, eventId, comment, verbose=null) {",
          "        return this.post(\"/users/\"+userId+\"/events/\"+eventId+\"/comments\", comment, \"РћС€РёР±РєР° РїСЂРё РґРѕР±Р°РІР»РµРЅРёРё РЅРѕРІРѕРіРѕ РєРѕРјРјРµРЅС‚Р°: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"РћС€РёР±РєР° РїСЂРё РґРѕР±Р°РІР»РµРЅРёРё РЅРѕРІРѕРіРѕ СЃРѕР±С‹С‚РёСЏ: \", verbose);",
          "    }",
          "",
          "    async addCompilation(compilation, verbose=null) {",
          "        return this.post(\"/admin/compilations\", compilation, \"РћС€РёР±РєР° РїСЂРё РґРѕР±Р°РІР»РµРЅРёРё РЅРѕРІРѕР№ РїРѕРґР±РѕСЂРєРё: \", verbose);",
          "    }",
          "",
          "    async publishParticipationRequest(eventId, userId, verbose=null) {",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"РћС€РёР±РєР° РїСЂРё РґРѕР±Р°РІР»РµРЅРёРё РЅРѕРІРѕРіРѕ Р·Р°РїСЂРѕСЃР° РЅР° СѓС‡Р°СЃС‚РёРµ РІ СЃРѕР±С‹С‚РёРё\", verbose);",
          "    }",
          "",
          "    async publishEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"РћС€РёР±РєР° РїСЂРё РїСѓР±Р»РёРєР°С†РёРё СЃРѕР±С‹С‚РёСЏ\", verbose);",
          "    }",
          "    ",
          "    async rejectEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"РћС€РёР±РєР° РїСЂРё РѕС‚РјРµРЅРµ СЃРѕР±С‹С‚РёСЏ\", verbose);",
          "    }",
          "",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"РћС€РёР±РєР° РїСЂРё РїСЂРёРЅСЏС‚РёРё Р·Р°СЏРІРєРё РЅР° СѓС‡Р°СЃС‚РёРµ РІ СЃРѕР±С‹С‚РёРё\", verbose);",
          "    }",
          "",
          "    async findCategory(catId, verbose=null) {",
          "        return this.get('/categories/' + catId, null, \"РћС€РёР±РєР° РїСЂРё РїРѕРёСЃРєРµ РєР°С‚РµРіРѕСЂРёРё РїРѕ id\", verbose);",
          "    }",
          "",
          "    async findCompilation(compId, verbose=null) {",
          "        return this.get('/compilations/' + compId, null, \"РћС€РёР±РєР° РїСЂРё РїРѕРёСЃРєРµ РїРѕРґР±РѕСЂРєРё РїРѕ id\", verbose);",
          "    }",
          "",
          "    async findEvent(eventId, verbose=null) {",
          "        return this.get('/events/' + eventId, null, \"РћС€РёР±РєР° РїСЂРё РїРѕРёСЃРєРµ СЃРѕР±С‹С‚РёСЏ РїРѕ id\", verbose);",
          "    }",
          "",
          "    async findUser(userId, verbose=null) {",
          "        return this.get('/admin/users?ids=' + userId, null, \"РћС€РёР±РєР° РїСЂРё РїРѕРёСЃРєРµ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ РїРѕ id\", verbose);",
          "    }",
          "",
          "    async post(path, body, errorText = \"РћС€РёР±РєР° РїСЂРё РІС‹РїРѕР»РЅРµРЅРёРё post-Р·Р°РїСЂРѕСЃР°: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"РћС€РёР±РєР° РїСЂРё РІС‹РїРѕР»РЅРµРЅРёРё patch-Р·Р°РїСЂРѕСЃР°: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"РћС€РёР±РєР° РїСЂРё РІС‹РїРѕР»РЅРµРЅРёРё get-Р·Р°РїСЂРѕСЃР°: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async sendRequest(method, path, body=null, errorText = \"РћС€РёР±РєР° РїСЂРё РІС‹РїРѕР»РЅРµРЅРёРё Р·Р°РїСЂРѕСЃР°: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "",
          "            if(verbose) {",
          "                console.log(\"РћС‚РїСЂР°РІР»СЏСЋ Р·Р°РїСЂРѕСЃ: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"РџСЂРё РІС‹РїРѕР»РЅРµРЅРёРё Р·Р°РїСЂРѕСЃР° Рє СЃРµСЂРІРµСЂСѓ РІРѕР·РЅРёРєР»Р° РѕС€РёРєР°.\\n\", err,",
          "                             \"\\nР”Р»СЏ РѕС‚Р»Р°РґРєРё РїСЂРѕР±Р»РµРјС‹ РїРѕРІС‚РѕСЂРёС‚Рµ С‚Р°РєРѕР№ Р¶Рµ Р·Р°РїСЂРѕСЃ Рє РІР°С€РµР№ РїСЂРѕРіСЂР°РјРјРµ \" + ",
          "                             \"РЅР° Р»РѕРєР°Р»СЊРЅРѕРј РєРѕРјРїСЊСЋС‚РµСЂРµ. Р”Р°РЅРЅС‹Рµ Р·Р°РїСЂРѕСЃР°:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "",
          "                    if(verbose) {",
          "                        console.log(\"Р РµР·СѓР»СЊС‚Р°С‚ РѕР±СЂР°Р±РѕС‚РєРё Р·Р°РїСЂРѕСЃР°: РєРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - \", response.code, \", С‚РµР»Рѕ: \", response.json());",
          "                    }",
          "",
          "                    resolve(response.json());",
          "                });",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
          "        };",
          "    }",
          "",
          "    getComment() {",
          "        return {",
          "            comment: pm.variables.replaceIn('{{$randomLoremParagraphs}}')",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getCompilation(...eventIds) {",
          "        return {",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            events: eventIds",
          "        };",
          "    }",
          "",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "",
          "    getWord(length = 1) {",
          "        let result = '';",
          "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
          "        const charactersLength = characters.length;",
          "        let counter = 0;",
          "        while (counter < length) {",
          "            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
          "            counter += 1;",
          "        }",
          "        return result;",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "name",
      "value": ""
    },
    {
      "key": "usersCount",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "request_body",
      "value": ""
    },
    {
      "key": "mail",
      "value": ""
    },
    {
      "key": "response",
      "value": ""
    },
    {
      "key": "uid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catname",
      "value": ""
    },
    {
      "key": "eid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "compid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "toCheck",
      "value": ""
    },
    {
      "key": "newDataToSet",
      "value": ""
    },
    {
      "key": "uid1",
      "value": ""
    },
    {
      "key": "reqid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catId",
      "value": ""
    },
    {
      "key": "confirmedRequests",
      "value": ""
    },
    {
      "key": "responseArr",
      "value": ""
    },
    {
      "key": "source1",
      "value": ""
    },
    {
      "key": "source2",
      "value": ""
    },
    {
      "key": "fromId",
      "value": "0"
    },
    {
      "key": "source",
      "value": ""
    },
    {
      "key": "cid",
      "value": "1",
      "type": "string"
    }
  ]
}